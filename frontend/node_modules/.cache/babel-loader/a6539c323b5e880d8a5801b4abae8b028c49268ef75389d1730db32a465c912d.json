{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\n  const response = await fetch('/api/users');\n  return response.json();\n});\nexport const deleteUser = createAsyncThunk('users/deleteUser', async id => {\n  await fetch(`/api/users/${id}`, {\n    method: 'DELETE'\n  });\n  return id;\n});\nexport const loginUser = createAsyncThunk('users/loginUser', async ({\n  email,\n  password\n}) => {\n  const response = await fetch('http://localhost:5000/api/login', {\n    // Ensure URL is correct\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!response.ok) {\n    throw new Error('Login failed'); // This will trigger the rejected case\n  }\n  return response.json(); // Return user data on successful login\n});\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(loginUser.fulfilled, (state, action) => {\n      state.currentUser = action.payload; // Save the user in the state\n      state.status = 'loggedIn';\n    }).addCase(loginUser.rejected, state => {\n      state.status = 'loginFailed'; // Set status to indicate failure\n    }).addCase(fetchUsers.fulfilled, (state, action) => {\n      return action.payload;\n    }).addCase(deleteUser.fulfilled, (state, action) => {\n      return state.filter(user => user.id !== action.payload);\n    });\n  }\n});\nexport default userSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchUsers","response","fetch","json","deleteUser","id","method","loginUser","email","password","headers","body","JSON","stringify","ok","Error","userSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","action","currentUser","payload","status","rejected","filter","user","reducer"],"sources":["C:/Users/KHUSHMEET SAINI/Desktop/mern-assignment/frontend/src/redux/userSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const fetchUsers = createAsyncThunk('users/fetchUsers', async () => {\r\n  const response = await fetch('/api/users');\r\n  return response.json();\r\n});\r\n\r\nexport const deleteUser = createAsyncThunk('users/deleteUser', async (id) => {\r\n  await fetch(`/api/users/${id}`, { method: 'DELETE' });\r\n  return id;\r\n});\r\n\r\nexport const loginUser = createAsyncThunk('users/loginUser', async ({ email, password }) => {\r\n    const response = await fetch('http://localhost:5000/api/login', { // Ensure URL is correct\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n  \r\n    if (!response.ok) {\r\n      throw new Error('Login failed'); // This will trigger the rejected case\r\n    }\r\n  \r\n    return response.json(); // Return user data on successful login\r\n  });\r\n  \r\n  const userSlice = createSlice({\r\n    name: 'users',\r\n    initialState: [],\r\n    reducers: {},\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(loginUser.fulfilled, (state, action) => {\r\n          state.currentUser = action.payload;  // Save the user in the state\r\n          state.status = 'loggedIn';\r\n        })\r\n        .addCase(loginUser.rejected, (state) => {\r\n          state.status = 'loginFailed';  // Set status to indicate failure\r\n        })\r\n        .addCase(fetchUsers.fulfilled, (state, action) => {\r\n            return action.payload;\r\n          })\r\n          .addCase(deleteUser.fulfilled, (state, action) => {\r\n            return state.filter(user => user.id !== action.payload);\r\n          })\r\n    },\r\n  });\r\n  \r\n\r\nexport default userSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,OAAO,MAAMC,UAAU,GAAGD,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,CAAC;EAC1C,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;AACxB,CAAC,CAAC;AAEF,OAAO,MAAMC,UAAU,GAAGL,gBAAgB,CAAC,kBAAkB,EAAE,MAAOM,EAAE,IAAK;EAC3E,MAAMH,KAAK,CAAC,cAAcG,EAAE,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAS,CAAC,CAAC;EACrD,OAAOD,EAAE;AACX,CAAC,CAAC;AAEF,OAAO,MAAME,SAAS,GAAGR,gBAAgB,CAAC,iBAAiB,EAAE,OAAO;EAAES,KAAK;EAAEC;AAAS,CAAC,KAAK;EACxF,MAAMR,QAAQ,GAAG,MAAMC,KAAK,CAAC,iCAAiC,EAAE;IAAE;IAChEI,MAAM,EAAE,MAAM;IACdI,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC;EAEF,IAAI,CAACR,QAAQ,CAACa,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC;EACnC;EAEA,OAAOd,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAMa,SAAS,GAAGlB,WAAW,CAAC;EAC5BmB,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE,EAAE;EAChBC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACf,SAAS,CAACgB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACE,WAAW,GAAGD,MAAM,CAACE,OAAO,CAAC,CAAE;MACrCH,KAAK,CAACI,MAAM,GAAG,UAAU;IAC3B,CAAC,CAAC,CACDN,OAAO,CAACf,SAAS,CAACsB,QAAQ,EAAGL,KAAK,IAAK;MACtCA,KAAK,CAACI,MAAM,GAAG,aAAa,CAAC,CAAE;IACjC,CAAC,CAAC,CACDN,OAAO,CAACtB,UAAU,CAACuB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC9C,OAAOA,MAAM,CAACE,OAAO;IACvB,CAAC,CAAC,CACDL,OAAO,CAAClB,UAAU,CAACmB,SAAS,EAAE,CAACC,KAAK,EAAEC,MAAM,KAAK;MAChD,OAAOD,KAAK,CAACM,MAAM,CAACC,IAAI,IAAIA,IAAI,CAAC1B,EAAE,KAAKoB,MAAM,CAACE,OAAO,CAAC;IACzD,CAAC,CAAC;EACR;AACF,CAAC,CAAC;AAGJ,eAAeX,SAAS,CAACgB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}